@page "/"
@page "/tracking-folder"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using System.Diagnostics
@using Tracking_Folder_Tool.Commons
@using static Tracking_Folder_Tool.Commons.Common
@using Radzen
@using Radzen.Blazor
@using System.IO
@using Tracking_Folder_Tool.Services
@using static Tracking_Folder_Tool.Services.CsvReaderService

@implements IAsyncDisposable
@inject NavigationManager Navigation
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime
@inject DirectoryService DirectoryService
@inject FolderWatcherService FolderWatcherService

<RadzenRow Style="width: 100%">
    <RadzenColumn SizeSM="7" Style="width: 100%">
        <RadzenStack Gap="10px" Style="width: 100%; padding-bottom: 10px;" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Center">
            <RadzenStack>
                <RadzenLabel Style="font-size: 24px; font-weight: 600">Tracking folder</RadzenLabel>
            </RadzenStack>

            <RadzenCard>
                <RadzenStack Gap="1rem">
                    <RadzenLabel Text="Select folder" Style="font-size: 18px; font-weight: 500" />

                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
                        <RadzenTextBox @bind-Value="SelectedPath" Style="width: 300px" Placeholder="Enter or select folder path" />
                        <RadzenDropDown Data="@AvailableDirectories" @bind-Value="SelectedPath" TValue="string" Style="width: 300px" Change="@(args => OnPathChanged(args.ToString()))" />
                        <RadzenButton Text="Refresh" Click=@RefreshDirectories />
                        <RadzenButton Text="Save Path" Click=@SaveFolderPath ButtonStyle="ButtonStyle.Success" />
                    </RadzenStack>

                    <RadzenLabel Text="Folder to tracking" Style="font-size: 18px; font-weight: 500" />
                    <RadzenStack Gap="10px" Orientation="Orientation.Horizontal">
                        <RadzenLabel Text="@FolderWatcherService.GetWatcherPath()" Style="font-size: 16px; color: darkgreen; font-weight: 500" />
                        <RadzenButton Text="Open Folder" Click=@OpenSelectedFolder ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Shade="Shade.Lighter" Variant="Variant.Outlined" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenCard>

            <RadzenStack Visible=@(FileLists.Any())>
                <RadzenButton Text="Clear" Click="ResetFileLists" Style="width: contain" Size=ButtonSize.Small ButtonStyle=ButtonStyle.Primary Variant=Variant.Flat></RadzenButton>
            </RadzenStack>
        </RadzenStack>
        <ul id="fileList">
            @foreach (var file in FileLists)
            {
                <li>
                    <b>@(FileLists.IndexOf(file) + 1) - @file.Name</b><br />
                    Path: @file.FullPath<br />
                    Name: @file.Name<br />
                    Type: @file.Extension<br />
                    Size: @file.Size bytes<br />
                    CreatedAt: @file.Created<br />
                    UpdatedAt: @file.Changed<br />
                    Action: @file.ActionType
                </li>
            }
        </ul>
    </RadzenColumn>

    <RadzenColumn SizeSM="5" Style="width: 100%">
        <RadzenDataGrid Data="@CSVDatas" TItem="Dictionary<string, string>" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true">
            <Columns>
                @if (CSVHeaders != null)
                {
                    @foreach (var header in CSVHeaders)
                    {
                        <RadzenDataGridColumn Width="60px" Frozen="true" FrozenPosition="FrozenColumnPosition.Left" Filterable="true"
                                              TItem="Dictionary<string, string>" Title="#"
                                              Property="@header" TextAlign="TextAlign.Center">
                            <HeaderTemplate>
                                <span style="font-weight: 600; font-size: 14px; color: white">@header</span>
                            </HeaderTemplate>
                            <Template Context="record">
                                <span style="font-weight: bold;">@record.Values.ToString()</span>
                            </Template>
                        </RadzenDataGridColumn>
                    }
                }
            </Columns>
        </RadzenDataGrid>
    </RadzenColumn>
</RadzenRow>

@code {
    private HubConnection? hubConnection;
    private string SelectedPath { get; set; } = string.Empty;
    private List<string> AvailableDirectories { get; set; } = new List<string>();
    private CsvReader csvReader = new();
    private List<Dictionary<string, string>>? CSVDatas;
    private List<string>? CSVHeaders;

    protected override async Task OnInitializedAsync()
    {
        var prevPath = Configuration["FolderPath"];
        // Load initial folder path from appsettings.json
        SelectedPath = prevPath ?? "No folder selected";
        await RefreshDirectories();

        if (!string.IsNullOrEmpty(prevPath))
        {
            FolderWatcherService.SetWatcherPath(prevPath);
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/notificationHub"))
            .Build();

        hubConnection.On<string>("ReceiveMessage", (json) =>
        {
            InvokeAsync(() =>
            {
                var file = JsonSerializer.Deserialize<FileDetail>(json);
                if (file != null)
                {
                    if (!FileLists.Any(f => f.Name == file.Name))
                    {
                        // Raise folder change
                        FileLists.Add(file);

                        // Read CSV file
                        var csv = ReadCsvData(file.FullPath);

                        CSVDatas = csv.Data;
                        CSVHeaders = csv.Headers;
                    }
                    StateHasChanged();
                }
            });
        });

        await hubConnection.StartAsync();
    }

    private (List<string>? Headers, List<Dictionary<string, string>>? Data) ReadCsvData(string filePath)
    {
        List<Dictionary<string, string>>? result = null;
        List<string>? headers = null;

        try
        {
            var csv = csvReader.ReadCsvFileDynamic(filePath);
            result = csv.Data;
            headers = csv.Headers;
            foreach (var row in result)
            {
                foreach (var kvp in row)
                {
                    Console.WriteLine($"{kvp.Key}: {kvp.Value}");
                }
                Console.WriteLine("---");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }

        return (headers, result);
    }

    private async Task OnPathChanged(string? newPath)
    {
        if (!string.IsNullOrEmpty(newPath))
        {
            SelectedPath = newPath;
            await RefreshDirectories();
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private void ResetFileLists()
    {
        FileLists = new();
    }

    private async Task RefreshDirectories()
    {
        await Task.Run(() =>
        {
            AvailableDirectories = DirectoryService.GetDirectories(SelectedPath);
            InvokeAsync(StateHasChanged);
        });
    }

    private async Task OpenFolderDialog()
    {
        try
        {
            // Note: Blazor Server can't use browser-based folder pickers for full paths.
            // For server-side folder selection, you need a custom solution or manual input.
            // Here, we'll validate the entered path or use a default server directory.
            if (string.IsNullOrEmpty(SelectedPath) || !Directory.Exists(SelectedPath))
            {
                // Default to a server-side directory for demonstration
                SelectedPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot");
            }

            if (Directory.Exists(SelectedPath))
            {
                StateHasChanged();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Invalid folder path. Please enter a valid path.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error selecting folder: {ex.Message}");
        }
    }

    private async Task SaveFolderPath()
    {
        try
        {
            if (!Directory.Exists(SelectedPath))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Invalid folder path. Please select a valid folder.");
                return;
            }

            // Read existing appsettings.json
            var appSettingsPath = Path.Combine(Directory.GetCurrentDirectory(), "appsettings.json");
            var json = await File.ReadAllTextAsync(appSettingsPath);
            var jsonObj = JsonSerializer.Deserialize<Dictionary<string, object>>(json);

            if (jsonObj != null)
            {
                // Update or add FolderPath
                if (jsonObj.ContainsKey("FolderPath"))
                {
                    jsonObj["FolderPath"] = SelectedPath;
                }
                else
                {
                    jsonObj.Add("FolderPath", SelectedPath);
                }
            }

            // Save updated appsettings.json
            var updatedJson = JsonSerializer.Serialize(jsonObj, new JsonSerializerOptions { WriteIndented = true });

            await File.WriteAllTextAsync(appSettingsPath, updatedJson);

            // Rechange Path of FileWatcher
            FolderWatcherService.SetWatcherPath(SelectedPath);

            await JSRuntime.InvokeVoidAsync("alert", "Folder path saved successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving folder path: {ex.Message}");
        }
    }

    private async Task OpenSelectedFolder()
    {
        try
        {
            if (!Directory.Exists(SelectedPath))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Invalid folder path. Please select a valid folder.");
                return;
            }

            // Open the folder in the system's file explorer
            Process.Start(new ProcessStartInfo
            {
                FileName = SelectedPath,
                UseShellExecute = true,
                Verb = "open"
            });
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error opening folder: {ex.Message}");
        }
    }
}