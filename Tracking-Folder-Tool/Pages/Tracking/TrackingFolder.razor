@page "/"
@page "/tracking-folder"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using Tracking_Folder_Tool.Commons
@using static Tracking_Folder_Tool.Commons.Common
@using Radzen
@using Radzen.Blazor

@implements IAsyncDisposable
@inject NavigationManager Navigation

<PageTitle>Tracking-Folder-Tool</PageTitle>

<RadzenStack Gap="10px" Style="width: 100%; padding-bottom: 10px;" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Center">
    <RadzenStack>
        <RadzenLabel Style="font-size: 24px; font-weight: 600">Tracking folder</RadzenLabel>
    </RadzenStack>
    <RadzenStack>
        <RadzenLabel Text="@($"Current folder")" Style="font-size: 18px; font-weight: 500"></RadzenLabel>
        <RadzenLabel Text="@(Common.TargetPath)" Style="font-size: 16px; color: darkgreen; font-weight: 500"></RadzenLabel>
    </RadzenStack>
    <RadzenStack Visible=@(FileLists.Any())>
        <RadzenButton Text="Clear" Click="ResetFileLists" Style="width: contain" Size=ButtonSize.Small ButtonStyle=ButtonStyle.Primary Variant=Variant.Flat></RadzenButton>
    </RadzenStack>
</RadzenStack>
<ul id="fileList">
    @foreach (var file in FileLists)
    {
        <li>
            <b>@(FileLists.IndexOf(file) + 1) - @file.Name</b><br />
            Path: @file.FullPath<br />
            Name: @file.Name<br />
            Type: @file.Extension<br />
            Size: @file.Size bytes<br />
            CreatedAt: @file.Created<br />
            UpdatedAt: @file.Changed<br />
            Action: @file.ActionType
        </li>
    }
</ul>

@code {
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/notificationHub"))
            .Build();

        hubConnection.On<string>("ReceiveMessage", (json) =>
        {
            InvokeAsync(() =>
            {
                var file = JsonSerializer.Deserialize<FileDetail>(json);
                if (file != null)
                {
                    if (!FileLists.Any(f => f.Name == file.Name))
                    {
                        FileLists.Add(file);
                    }
                    StateHasChanged();
                }
            });
        });

        await hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private void ResetFileLists()
    {
        FileLists = new();
    }
}