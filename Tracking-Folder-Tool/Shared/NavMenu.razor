﻿@using Radzen.Blazor;
@using Radzen;

@inject TooltipService TooltipService

<style>
    .mycolor-press {
        color: rgba(28, 49, 90);
    }

    .mycolor-default {
        color: white;
    }
</style>

<RadzenSidebar Visible="@visibleSideBar" Responsive="true" Style="width: max-content; height: 100%">
    <RadzenPanelMenu DisplayStyle="@(sidebarExpanded? MenuItemDisplayStyle.IconAndText: MenuItemDisplayStyle.Icon)" ShowArrow="true" Style="width: fit-content; height: 100%;">
        <RadzenStack Gap="0" Orientation="Orientation.Vertical" Style="height: 100%; padding-top: 50px" JustifyContent="JustifyContent.Start">
            <RadzenStack Visible=false Style="padding-bottom: 20px">
                @* <RadzenImage Visible="@(sidebarExpanded)" Path="properties/image/Logo_avs.png" Style="width: 200px; height: 150px" AlternateText="community" /> *@
            </RadzenStack>
            <RadzenPanelMenuItem MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Home"))" Style="padding-bottom: 5px; color: white" IconColor="color: white" Text="Home" Path="/tracking-folder" Icon="home"></RadzenPanelMenuItem>
        </RadzenStack>
    </RadzenPanelMenu>
</RadzenSidebar>

@code
{
    [Parameter]
    public bool sidebarExpanded { get; set; }

    [Parameter]
    public bool visibleSideBar { get; set; }

    private string stylecolor = "mycolor-press";

    private void MenuItemClick(MenuItemEventArgs eventArgs)
    {
        if (stylecolor == "mycolor-default")
        {
            stylecolor = "mycolor-press";
        }
        else
            stylecolor = "mycolor-default";
    }
    // Tooltip
    void ShowToolTip(ElementReference elementReference, TooltipPosition position, string content)
    {
        if (!sidebarExpanded)
        {
            TooltipOptions options = new TooltipOptions() { Position = position, Delay = 50, Style = "background-color: black" };

            TooltipService.Open(elementReference, content, options);
        }
    }
}